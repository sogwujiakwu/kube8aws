#---
- hosts: all
  become: yes
  tasks:
    - name: Create configuration file for containerd
      shell: 
        cmd: |
          cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
          overlay
          br_netfilter
          EOF
          
    - name: Load modules
      command: modprobe overlay && modprobe br_netfilter

    - name: Set system configurations for Kubernetes networking
      shell: 
        cmd: |
          cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1
          EOF   
    - name: Apply new settings
      command: sysctl --system

#    - name: Remove any existing docker and containerd
#      shell: apt-get remove docker docker-engine docker.io containerd runc

    - name: Update the apt package index and install packages to allow apt to use a repository over HTTPS
      shell: apt-get update && apt-get install -y ca-certificates curl gnupg lsb-release

    - name: Sleep for 20 seconds
      wait_for:
          timeout: 20

    - name: Add Dockerâ€™s official GPG key
      shell: mkdir -m 0755 -p /etc/apt/keyrings && curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg

    - name: Set up the repository
      shell: echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

    - name: Sleep for 20 seconds
      wait_for:
          timeout: 20
          
    - name: Update the apt package index
      shell: apt-get update

    - name: Sleep for 20 seconds
      wait_for:
          timeout: 20

    - name: Install Latest version of Docker Engine, containerd, and Docker Compose
      shell: apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

    - name: Generate default containerd configuration and save to the newly created default file 
      shell: containerd config default | tee /etc/containerd/config.toml

    - name: Configuring the systemd cgroup driver
      ini_file: dest=/etc/containerd/config.toml section=plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options option=SystemdCgroup value=true backup=yes
      tags: configuration
 
    - name: Restart containerd to ensure new configuration file usage
      shell: systemctl restart containerd

    - name: Verify that containerd is running
      shell: systemctl status containerd

    - name: Disable swap
      shell: sudo swapoff -a

    - name: Comment swapfile in /etc/fstab
      replace:
        path: /etc/nginx/nginx.conf
        regexp: '(\s+)/swapfile                                 none            swap    sw              0       0'
        replace: '\n\t#/swapfile                                 none            swap    sw              0       0'
        backup: yes
            
    - name: Install dependency packages
      shell: apt-get update && apt-get install -y apt-transport-https curl

    - name: Sleep for 20 seconds
      wait_for:
          timeout: 20

#    - name: Download and add GPG key
#      command: curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

    - name: Add Kubernetes apt-key for APT repository
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        # curl -fsSLo /etc/apt/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Add Kubernetes to repository list
      shell: echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | tee /etc/apt/sources.list.d/kubernetes.list
      #  cmd: |             
      #    cat <<EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
      #    deb https://apt.kubernetes.io/ kubernetes-xenial main
      #    EOF
      #        
    - name: Update package listings
      shell: sudo apt-get update

    - name: Sleep for 20 seconds
      wait_for:
          timeout: 20

    - name: Kubelet Install
      apt:
          name: kubelet=1.26.0-00
          state: present
          update_cache: true

    - name: Kubeadm Install
      apt:
          name: kubeadm=1.26.0-00 
          state: present
          update_cache: true

### Master Node Configurations
- hosts: masters_first
  become: yes
  vars_files:
    - ansible_vars_file.yml
  tasks:
   - name: Kubectl Install
     apt:
       name: kubectl=1.26.0-00 
       state: present
       force: yes

   - name: Start the cluster
     shell: kubeadm init --cri-socket unix:///run/containerd/containerd.sock --pod-network-cidr=192.168.0.0/16 --control-plane-endpoint "{{ master_lb }}":6443 --upload-certs >> cluster.txt
     register: result
     args:
      chdir: $HOME
      creates: cluster.txt
  
   - name: Sleep for 20 seconds
     wait_for:
      timeout: 20

   - name: Create .kube directory
     become: yes
     become_user: ubuntu
     file:
       path: $HOME/.kube
       state: directory
       mode: 0755

   - name: Check admin.conf file exists.
     stat:
       path: /etc/kubernetes/admin.conf
     register: k8s_conf

   - name: Copy admin.conf to user's kube config
     copy:
       src: /etc/kubernetes/admin.conf
       dest: /home/ubuntu/.kube/config
       remote_src: yes
       owner: ubuntu
     when: k8s_conf.stat.exists

   - name: Sleep for 20 seconds
     wait_for:
      timeout: 20

   - name: Install Pod network
     become_user: ubuntu
     shell: kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml >> pod_setup.txt
     args:
       chdir: $HOME
       creates: pod_setup.txt

#   - name: Check status of the control plane node
#     shell: kubectl get nodes

   - name: Create a new certificate key
     shell: kubeadm init phase upload-certs --upload-certs
     register: join_certificate_key

   - name: Get join command
     shell: kubeadm token create --print-join-command --certificate-key "{{ join_certificate_key.stdout_lines[2] }}"
     register: join_command

   - debug:
      var: join_command

   - name: Copy join command to local file
     local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join_command"

   - name: Get worker node join command
     shell: kubeadm token create --print-join-command
     register: join_node_command

   - name: Copy worker node join command to local file
     local_action: copy content="{{ join_node_command.stdout_lines[0] }}" dest="./join_node_command"
###

#### Configure other master nodes

- hosts: masters_others
  become: yes
  tasks:
   - name: Kubectl Install
     apt:
       name: kubectl=1.24.0-00
       state: present
       force: yes

   - name: Copy the master join command to server location
     copy: src=join_command dest=/tmp/join_command.sh mode=0777

#   - name: Add cri socket to kubelet
#     replace:
#      path: /tmp/join_command.sh
#      regexp: "--token"
#      replace: "--cri-socket='/run/cri-dockerd.sock' --token"

   - name: Join the master node to cluster
     command: sh /tmp/join_command.sh

   - name: Sleep for 20 seconds
     wait_for:
      timeout: 20

   - name: Create .kube directory
     become: yes
     become_user: ubuntu
     file:
       path: $HOME/.kube
       state: directory
       mode: 0755

   - name: Check admin.conf file exists.
     stat:
       path: /etc/kubernetes/admin.conf
     register: k8s_conf

   - name: Copy admin.conf to user's kube config
     copy:
       src: /etc/kubernetes/admin.conf
       dest: /home/ubuntu/.kube/config
       remote_src: yes
       owner: ubuntu
     when: k8s_conf.stat.exists

####

##### Worker Node Configurations
- hosts: workers
  become: yes
  tasks:
    - name: Copy the worker join command to server location
      copy: src=join_node_command dest=/tmp/join_node_command.sh mode=0777

#    - name: Add cri socket to kubelet
#      replace:
#        path: /tmp/join_node_command.sh
#        regexp: "--token"
#        replace: "--cri-socket='/run/cri-dockerd.sock' --token"

    - name: Join the worker node to cluster
      command: sh /tmp/join_node_command.sh
#####

# Install Kubernetes packages (Note: If you get a dpkg lock message, just wait a minute or two before trying the command again):
# sudo apt-get install -y kubelet=1.24.0-00 kubeadm=1.24.0-00 kubectl=1.24.0-00
# Turn off automatic updates:
# sudo apt-mark hold kubelet kubeadm kubectl
# Log into both worker nodes to perform previous steps.
# Initialize the Cluster
# Initialize the Kubernetes cluster on the control plane node using kubeadm (Note: This is only performed on the Control Plane Node):
# sudo kubeadm init --pod-network-cidr 192.168.0.0/16 --kubernetes-version 1.24.0
# Set kubectl access:
# mkdir -p $HOME/.kube
# sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
# sudo chown $(id -u):$(id -g) $HOME/.kube/config
# Test access to cluster:
# kubectl get nodes
# Install the Calico Network Add-On
# On the control plane node, install Calico Networking:
# kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
# Check status of the control plane node:
# kubectl get nodes
# Join the Worker Nodes to the Cluster
# In the control plane node, create the token and copy the kubeadm join command (NOTE:The join command can also be found in the # output from kubeadm init command):
# kubeadm token create --print-join-command
# In both worker nodes, paste the kubeadm join command to join the cluster. Use sudo to run it as root:
# sudo kubeadm join ...
# In the control plane node, view cluster status (Note: You may have to wait a few moments to allow all nodes to become ready):
# kubectl get nodes
